// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core models for the Chess Analysis App

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  emailVerified    DateTime?
  name             String?
  passwordHash     String
  chessComUsername String?   @unique
  image            String?

  accounts         Account[]
  sessions         Session[]
  games            Game[]
  friends          Friend[]  @relation("UserFriends")
  friendOf         Friend[]  @relation("FriendUsers")

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id              String   @id @default(cuid())
  userId          String
  chessComGameId  String   @unique
  opponent        String
  pgn             String
  result          String
  timeClass       String
  endTime         DateTime
  rated           Boolean  @default(false)
  ecoCode         String?
  openingName     String?

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moves           Move[]
  analysis        Analysis?

  createdAt       DateTime @default(now())
}

model Move {
  id            String   @id @default(cuid())
  gameId        String
  moveNumber    Int
  san           String
  uci           String?
  color         String
  timeSpentMs   Int?
  evalCp        Int?
  bestMoveUci   String?
  moveQuality   String? // Brilliant/Great/Good/Inaccuracy/Mistake/Blunder
  fenAfter      String?

  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId, moveNumber])
}

model Analysis {
  id                 String  @id @default(cuid())
  gameId             String  @unique
  accuracyOpening    Float?
  accuracyMiddle     Float?
  accuracyEnd        Float?
  criticalMomentsJson String? // JSON string of moments
  biggestMistakesJson String? // JSON string of mistakes/what-ifs
  playerPersonasJson  String? // JSON array of persona scores
  completed          Boolean @default(false)
  durationMs         Int?

  game               Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Friend {
  id        String  @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User   @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User   @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}
